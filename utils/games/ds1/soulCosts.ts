export const soulCosts: Record<number, number> = {
  2: 673,
  3: 690,
  4: 707,
  5: 724,
  6: 741,
  7: 758,
  8: 775,
  9: 793,
  10: 811,
  11: 829,
  12: 847,
  13: 1039,
  14: 1238,
  15: 1445,
  16: 1660,
  17: 1883,
  18: 2114,
  19: 2353,
  20: 2601,
  21: 2857,
  22: 3122,
  23: 3396,
  24: 3678,
  25: 3970,
  26: 4271,
  27: 4581,
  28: 4900,
  29: 5229,
  30: 5567,
  31: 5915,
  32: 6273,
  33: 6641,
  34: 7019,
  35: 7407,
  36: 7805,
  37: 8214,
  38: 8634,
  39: 9064,
  40: 9505,
  41: 9957,
  42: 10420,
  43: 10894,
  44: 11379,
  45: 11876,
  46: 12384,
  47: 12904,
  48: 13436,
  49: 13979,
  50: 14535,
  51: 15103,
  52: 15683,
  53: 16275,
  54: 16880,
  55: 17497,
  56: 18127,
  57: 18770,
  58: 19426,
  59: 20095,
  60: 20777,
  61: 21472,
  62: 22181,
  63: 22904,
  64: 23640,
  65: 24390,
  66: 25154,
  67: 25932,
  68: 26724,
  69: 27530,
  70: 28351,
  71: 29186,
  72: 30036,
  73: 30901,
  74: 31780,
  75: 32675,
  76: 33585,
  77: 34510,
  78: 35450,
  79: 36406,
  80: 37377,
  81: 38364,
  82: 39367,
  83: 40386,
  84: 41421,
  85: 42472,
  86: 43539,
  87: 44623,
  88: 45724,
  89: 46841,
  90: 47975,
  91: 49126,
  92: 50294,
  93: 51479,
  94: 52681,
  95: 53901,
  96: 55138,
  97: 56393,
  98: 57666,
  99: 58956,
  100: 60265,
  101: 61592,
  102: 62937,
  103: 64300,
  104: 65682,
  105: 67082,
  106: 68501,
  107: 69939,
  108: 71396,
  109: 72872,
  110: 74367,
  111: 75881,
  112: 77415,
  113: 78969,
  114: 80542,
  115: 82135,
  116: 83748,
  117: 85381,
  118: 87034,
  119: 88707,
  120: 90401,
  121: 92115,
  122: 93850,
  123: 95606,
  124: 97382,
  125: 99180,
  126: 100999,
  127: 102839,
  128: 104700,
  129: 106583,
  130: 108487,
  131: 110413,
  132: 112361,
  133: 114331,
  134: 116323,
  135: 118337,
  136: 120373,
  137: 122432,
  138: 124514,
  139: 126618,
  140: 128745,
  141: 130895,
  142: 133068,
  143: 135264,
  144: 137483,
  145: 139726,
  146: 141992,
  147: 144282,
  148: 146596,
  149: 148933,
  150: 151295,
  151: 153681,
  152: 156091,
  153: 158525,
  154: 160984,
  155: 163467,
  156: 165975,
  157: 168508,
  158: 171066,
  159: 173649,
  160: 176257,
  161: 178890,
  162: 181549,
  163: 184234,
  164: 186944,
  165: 189680,
  166: 192442,
  167: 195230,
  168: 198044,
  169: 200884,
  170: 203751,
  171: 206644,
  172: 209564,
  173: 212511,
  174: 215484,
  175: 218485,
  176: 221513,
  177: 224568,
  178: 227650,
  179: 230760,
  180: 233897,
  181: 237062,
  182: 240255,
  183: 243476,
  184: 246725,
  185: 250002,
  186: 253307,
  187: 256641,
  188: 260004,
  189: 263395,
  190: 266815,
  191: 270264,
  192: 273742,
  193: 277249,
  194: 280785,
  195: 284351,
  196: 287946,
  197: 291571,
  198: 295226,
  199: 298910,
  200: 302625,
  201: 306370,
  202: 310145,
  203: 313950,
  204: 317786,
  205: 321652,
  206: 325549,
  207: 329477,
  208: 333436,
  209: 337426,
  210: 341447,
  211: 345499,
  212: 349583,
  213: 353699,
  214: 357846,
  215: 362025,
  216: 366236,
  217: 370479,
  218: 374754,
  219: 379061,
  220: 383401,
  221: 387773,
  222: 392178,
  223: 396616,
  224: 401086,
  225: 405590,
  226: 410127,
  227: 414697,
  228: 419300,
  229: 423937,
  230: 428607,
  231: 433311,
  232: 438049,
  233: 442821,
  234: 447627,
  235: 452467,
  236: 457341,
  237: 462250,
  238: 467194,
  239: 472172,
  240: 477185,
  241: 482233,
  242: 487316,
  243: 492434,
  244: 497587,
  245: 502776,
  246: 508000,
  247: 513260,
  248: 518556,
  249: 523887,
  250: 529255,
  251: 534659,
  252: 540099,
  253: 545575,
  254: 551088,
  255: 556637,
  256: 562223,
  257: 567846,
  258: 573506,
  259: 579203,
  260: 584937,
  261: 590709,
  262: 596517,
  263: 602364,
  264: 608248,
  265: 614170,
  266: 620130,
  267: 626128,
  268: 632164,
  269: 638238,
  270: 644351,
  271: 650502,
  272: 656692,
  273: 662921,
  274: 669188,
  275: 675495,
  276: 681841,
  277: 688226,
  278: 694650,
  279: 701114,
  280: 707617,
  281: 714160,
  282: 720743,
  283: 727366,
  284: 734029,
  285: 740732,
  286: 747476,
  287: 754259,
  288: 761084,
  289: 767949,
  290: 774855,
  291: 781802,
  292: 788790,
  293: 795819,
  294: 802889,
  295: 810001,
  296: 817154,
  297: 824349,
  298: 831586,
  299: 838864,
  300: 846185,
  301: 853548,
  302: 860953,
  303: 868400,
  304: 875890,
  305: 883422,
  306: 890997,
  307: 898615,
  308: 906276,
  309: 913980,
  310: 921727,
  311: 929517,
  312: 937351,
  313: 945229,
  314: 953150,
  315: 961115,
  316: 969124,
  317: 977177,
  318: 985274,
  319: 993415,
  320: 1001601,
  321: 1009831,
  322: 1018196,
  323: 1026426,
  324: 1034790,
  325: 1043163,
  326: 1051576,
  327: 1059930,
  328: 1068324,
  329: 1076759,
  330: 1085927,
  331: 1094609,
  332: 1103337,
  333: 1112111,
  334: 1120931,
  335: 1129797,
  336: 1138710,
  337: 1147668,
  338: 1156674,
  339: 1165726,
  340: 1174825,
  341: 1183971,
  342: 1193164,
  343: 1202404,
  344: 1211691,
  345: 1221026,
  346: 1230408,
  347: 1239838,
  348: 1249316,
  349: 1258841,
  350: 1268415,
  351: 1278037,
  352: 1287707,
  353: 1297425,
  354: 1307192,
  355: 1317007,
  356: 1326871,
  357: 1336784,
  358: 1346746,
  359: 1356757,
  360: 1366817,
  361: 1376927,
  362: 1387085,
};

const capValue = soulCosts[362];
for (let lvl = 363; lvl <= 713; lvl++) {
  soulCosts[lvl] = capValue;
}

export const soulCostCumulative: number[] = [0];

for (let i = 1; i <= 713; i++) {
  soulCostCumulative[i] =
    (soulCostCumulative[i - 1] ?? 0) + (soulCosts[i] ?? 0);
}

/**
 * Get soul costs for Dark Souls 1
 * @returns Record of level to soul cost mapping
 */
export const getSoulCosts = (): Record<number, number> => {
  return soulCosts;
};

/**
 * Get cumulative soul costs for Dark Souls 1
 * @returns Array of cumulative soul costs by level
 */
export const getSoulCostCumulative = (): number[] => {
  return soulCostCumulative;
};

/**
 * Calculate souls needed to reach a specific level
 * @param currentLevel - Current character level
 * @param targetLevel - Target character level
 * @returns Souls needed to reach target level, or null if invalid
 */
export const calculateSoulsNeeded = (
  currentLevel: number,
  targetLevel: number
): number | null => {
  if (
    currentLevel < 1 ||
    targetLevel < 1 ||
    currentLevel > 713 ||
    targetLevel > 713 ||
    currentLevel >= targetLevel
  ) {
    return null;
  }

  return soulCostCumulative[targetLevel] - soulCostCumulative[currentLevel];
};
